import React, { useState } from 'react';

const Quest = ({ progress, setProgress, onComplete }) => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState([]);
  const [inputValue, setInputValue] = useState('');

  const questions = [
    {
      id: 1,
      type: 'choice',
      question: '–ï—Å–ª–∏ –±—ã –≥–∞–ª–µ—Ä–µ–∏ –ë–∞—Ä—Å–µ–ª–æ–Ω—ã –±—ã–ª–∏ –ø—ã–ª—å—é –≤ –ø—É—Å—Ç—ã–Ω–µ, —Å–∫–æ–ª—å–∫–æ –ø–µ—Å—á–∏–Ω–æ–∫ —Ç—ã –Ω–∞—Å–æ–±–∏—Ä–∞–ª–∞?',
      options: ['‚àû –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å', '128 —Å–≤—è—â–µ–Ω–Ω—ã—Ö –∫—Ä—É–ø–∏–Ω–æ–∫', '42 (–æ—Ç–≤–µ—Ç –Ω–∞ –≤—Å—ë)', '–°—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ –Ω–∞–¥ –ø–ª–∞–π–µ–π'],
      correct: 1,
      hint: '–¢—ã –∂–µ –ø–∏—Å–∞–ª–∞ –º–Ω–µ —Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ –≤ –∞–ø—Ä–µ–ª–µ... 128!'
    },
    {
      id: 2,
      type: 'choice',
      question: '–í –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π —Ç—ã –∫—É—Ä–∞—Ç–æ—Ä. –ö–∞–∫—É—é –≤—ã—Å—Ç–∞–≤–∫—É —Ç—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—à—å?',
      options: [
        '"–î–∞–Ω–Ω—ã–µ –∫–∞–∫ –∏—Å–∫—É—Å—Å—Ç–≤–æ: –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ö–∞–æ—Å–∞"',
        '"–†—É—Ñ—Ç–æ–ø—ã –ë–∞—Ä—Å–µ–ª–æ–Ω—ã: –º–µ–∂–¥—É –Ω–µ–±–æ–º –∏ –±–µ—Ç–æ–Ω–æ–º"',
        '"JSON-–ø–æ—ç–∑–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏"',
        '"–í –æ–¥–Ω–æ–º —Ä—è–¥—É —Å –ë—Ä–∏—Ç–Ω–∏: –ø–æ–ø-–∞—Ä—Ç –∞–±—Å—É—Ä–¥–∞"'
      ],
      correct: 3,
      hint: '–ü–æ–º–Ω–∏—à—å, –∫–∞–∫ —Ç—ã —É–≥–∞—Ä–∞–ª–∞ —Å —ç—Ç–æ–≥–æ? "–í –æ–¥–Ω–æ–º —Ä—è–¥—É —Å –ë—Ä–∏—Ç–Ω–∏"!'
    },
    {
      id: 3,
      type: 'choice',
      question: '–î—É—Ö –ø—É—Å—Ç—ã–Ω–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –ò—Å–ø–∞–Ω–∏–∏. –ß—Ç–æ –≤—ã–±–∏—Ä–∞–µ—à—å?',
      options: [
        'üöê –ê–≤—Ç–æ–¥–æ–º –∑–∞ –µ–≤—Ä–æ –≤ –¥–µ–Ω—å',
        'üöå –ê–≤—Ç–æ–±—É—Å –ø–æ—Å–ª–µ —Ä–∞–∑–º—ã—Ç–∏—è –¥–æ—Ä–æ–≥',
        'ü¶© –†–æ–∑–æ–≤—ã–π —Ñ–ª–∞–º–∏–Ω–≥–æ',
        'üìä –ì—Ä–∞—Ñ–∏–∫ –º–µ–¥–∏–∞–Ω–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞—Ä–µ–Ω–¥—ã'
      ],
      correct: 0,
      hint: '–í–∏—Ç–∞–ª–∏–∫ –∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª –∞–≤—Ç–æ–¥–æ–º –≤ –ò—Ç–∞–ª–∏–∏ –∑–∞ –µ–≤—Ä–æ –≤ –¥–µ–Ω—å!'
    },
    {
      id: 4,
      type: 'choice',
      question: '–ù–∞ Burning Man —Ç—ã —Å–æ–∑–¥–∞—ë—à—å –∞—Ä—Ç-–∏–Ω—Å—Ç–∞–ª–ª—è—Ü–∏—é –∏–∑ –¥–∞–Ω–Ω—ã—Ö. –ß—Ç–æ –≤ –æ—Å–Ω–æ–≤–µ?',
      options: [
        '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö –º—É–∑–µ–µ–≤, –ø—Ä–µ–≤—Ä–∞—â—ë–Ω–Ω—ã–µ –≤ —Å–æ–∑–≤–µ–∑–¥–∏–µ',
        'RSS-–ª–µ–Ω—Ç—ã MACBA, –∑–≤—É—á–∞—â–∏–µ –∫–∞–∫ –º–∞–Ω—Ç—Ä—ã',
        'Instagram-–ø–∞—Ä—Å–∏–Ω–≥, —Ä–∏—Å—É—é—â–∏–π –º–∞–Ω–¥–∞–ª—ã',
        '–í—Å—ë –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –≤ –≤–∏–¥–µ –¥–∞—Ç–∞-—Å–∫—É–ª—å–ø—Ç—É—Ä—ã'
      ],
      correct: 3,
      hint: '–¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞ - —Å–æ–±–∏—Ä–∞—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥–∞–ª–µ—Ä–µ—è—Ö!'
    },
    {
      id: 5,
      type: 'ritual',
      question: '–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∏—Ç—É–∞–ª: —Ä–∞—Å—Å—Ç–∞–≤—å —ç–ª–µ–º–µ–Ω—Ç—ã –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏',
      options: ['üí∞ –¶–µ–Ω–∞', 'üìè –†–∞–∑–º–µ—Ä', 'üíù –í–Ω–∏–º–∞–Ω–∏–µ', 'üéÅ –£–ø–∞–∫–æ–≤–∫–∞'],
      correct: [2, 0, 1, 3], // –í–Ω–∏–º–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–µ
      hint: '–¢—ã –∂–µ —Å–∞–º–∞ —Å–∫–∞–∑–∞–ª–∞: "–¥–ª—è –º–µ–Ω—è —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ"'
    },
    {
      id: 6,
      type: 'choice',
      question: 'Deep playa soulmate –≤–∏–¥–∏—Ç –≤ —Ç–µ–±–µ...',
      options: [
        '–•—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç—ã–Ω–∏',
        '–ö–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥–∞–ª–µ—Ä–µ–π',
        '–¢—É, –∫—Ç–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ö–∞–æ—Å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É',
        '–ò—Å–∫–∞—Ç–µ–ª—è –∏—Å–∫—É—Å—Å—Ç–≤–∞ –≤ —à—É–º–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
      ],
      correct: 2,
      hint: '–í—Å—è —Ç–≤–æ—è —Ä–∞–±–æ—Ç–∞ - —ç—Ç–æ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ —Ö–∞–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—Ä–∞—Å–∏–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã!'
    }
  ];

  const handleAnswer = (answerIndex) => {
    const question = questions[currentQuestion];
    let isCorrect = false;

    if (question.type === 'choice') {
      isCorrect = answerIndex === question.correct;
    } else if (question.type === 'input') {
      const answer = inputValue.toLowerCase().trim();
      isCorrect = answer === question.correct || 
                  (question.alternatives && question.alternatives.some(alt => answer.includes(alt.toLowerCase())));
    } else if (question.type === 'ritual') {
      // –î–ª—è —Ä–∏—Ç—É–∞–ª–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ "–í–Ω–∏–º–∞–Ω–∏–µ" –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ
      isCorrect = answerIndex === 2;
    }

    if (isCorrect) {
      const newAnswers = [...answers, { question: currentQuestion, correct: true }];
      setAnswers(newAnswers);
      
      const newProgress = ((currentQuestion + 1) / questions.length) * 100;
      setProgress(newProgress);

      if (currentQuestion + 1 >= questions.length) {
        setTimeout(() => onComplete(), 1000);
      } else {
        setCurrentQuestion(currentQuestion + 1);
        setInputValue('');
      }
    } else {
      alert(question.hint);
    }
  };

  const question = questions[currentQuestion];

  return (
    <div className="container">
      <h2>–ò—Å–ø—ã—Ç–∞–Ω–∏–µ {currentQuestion + 1} –∏–∑ {questions.length}</h2>
      
      <div className="progress-bar">
        <div className="progress-fill" style={{ width: `${progress}%` }}></div>
      </div>

      <h3 style={{ fontSize: '1.3em', lineHeight: '1.5' }}>{question.question}</h3>

      {question.type === 'choice' && (
        <div>
          {question.options.map((option, index) => (
            <button
              key={index}
              className="answer-button"
              onClick={() => handleAnswer(index)}
              style={{ fontSize: '1.1em' }}
            >
              {option}
            </button>
          ))}
        </div>
      )}

      {question.type === 'input' && (
        <div>
          <input
            type="text"
            className="code-input"
            placeholder={question.placeholder}
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={(e) => {
              if (e.key === 'Enter') {
                handleAnswer();
              }
            }}
          />
          <button onClick={() => handleAnswer()}>–û—Ç–≤–µ—Ç–∏—Ç—å –¥—É—Ö—É</button>
        </div>
      )}

      {question.type === 'ritual' && (
        <div>
          <p style={{ marginBottom: '20px', opacity: 0.8 }}>
            –í—ã–±–µ—Ä–∏ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ:
          </p>
          {question.options.map((option, index) => (
            <button
              key={index}
              className="answer-button"
              onClick={() => handleAnswer(index)}
              style={{ fontSize: '1.2em' }}
            >
              {option}
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default Quest;