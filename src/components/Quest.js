import React, { useState } from 'react';

const Quest = ({ progress, setProgress, onComplete }) => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState([]);
  const [inputValue, setInputValue] = useState('');

  const questions = [
    {
      id: 1,
      type: 'choice',
      question: '–ü–æ–º–Ω–∏—à—å, —Å–∫–æ–ª—å–∫–æ –≥–∞–ª–µ—Ä–µ–π-–º—É–∑–µ–µ–≤-—Ñ–µ—Å—Ç–∏–≤–∞–ª–µ–π –≤—ã –Ω–∞—Å–æ–±–∏—Ä–∞–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ?',
      options: ['64', '96', '128', '156'],
      correct: 2,
      hint: '–¢—ã –∂–µ –ø–∏—Å–∞–ª–∞ –º–Ω–µ –æ–± —ç—Ç–æ–º –≤ –∞–ø—Ä–µ–ª–µ...'
    },
    {
      id: 2,
      type: 'choice',
      question: '–ö–∞–∫–æ–π –º—É–∑–µ–π –≤ –ë–∞—Ä—Å–µ–ª–æ–Ω–µ —Ç—ã –¥–æ–±–∞–≤–ª—è–ª–∞ –≤ RSS-–ª–µ–Ω—Ç—É?',
      options: ['MNAC', 'MACBA', 'Picasso Museum', 'Joan Mir√≥ Foundation'],
      correct: 1,
      hint: '–ú—É–∑–µ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞...'
    },
    {
      id: 3,
      type: 'input',
      question: '–í –∫–∞–∫–æ–º –±–æ—Ç–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—Ä–µ–Ω–¥—ã –∂–∏–ª—å—è –≤ –ò—Å–ø–∞–Ω–∏–∏?',
      placeholder: '–í–≤–µ–¥–∏ username –±–æ—Ç–∞',
      correct: '@spainrental_bot',
      hint: '–í–∏—Ç–∞–ª–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–ª —Ç–µ–±–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞...'
    },
    {
      id: 4,
      type: 'data',
      question: '–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: —á—Ç–æ –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –æ –≥–∞–ª–µ—Ä–µ—è—Ö?',
      options: [
        ['Name', 'Instagram', 'Coordinates', 'Address'],
        ['Type', 'Name', 'Web', 'Instagram'],
        ['Google link', 'Address', 'Schedule', 'Phone'],
        ['Artists', 'Events', 'Tickets', 'Reviews']
      ],
      correct: 1,
      hint: '–¢—ã —Å–∞–º–∞ —Å–æ—Å—Ç–∞–≤–ª—è–ª–∞ —ç—Ç—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É...'
    },
    {
      id: 5,
      type: 'choice',
      question: '–ß—Ç–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –≤ –ø–æ–¥–∞—Ä–∫–µ?',
      options: ['–¶–µ–Ω–∞', '–†–∞–∑–º–µ—Ä', '–í–Ω–∏–º–∞–Ω–∏–µ', '–£–ø–∞–∫–æ–≤–∫–∞'],
      correct: 2,
      hint: '–¢—ã —Å–∞–º–∞ —ç—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∞ üòä'
    }
  ];

  const handleAnswer = (answerIndex) => {
    const question = questions[currentQuestion];
    let isCorrect = false;

    if (question.type === 'choice' || question.type === 'data') {
      isCorrect = answerIndex === question.correct;
    } else if (question.type === 'input') {
      isCorrect = inputValue.toLowerCase().trim() === question.correct.toLowerCase();
    }

    if (isCorrect) {
      const newAnswers = [...answers, { question: currentQuestion, correct: true }];
      setAnswers(newAnswers);
      
      const newProgress = ((currentQuestion + 1) / questions.length) * 100;
      setProgress(newProgress);

      if (currentQuestion + 1 >= questions.length) {
        setTimeout(() => onComplete(), 1000);
      } else {
        setCurrentQuestion(currentQuestion + 1);
        setInputValue('');
      }
    } else {
      alert(question.hint);
    }
  };

  const question = questions[currentQuestion];

  return (
    <div className="container">
      <h2>–í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {questions.length}</h2>
      
      <div className="progress-bar">
        <div className="progress-fill" style={{ width: `${progress}%` }}></div>
      </div>

      <h3>{question.question}</h3>

      {question.type === 'choice' && (
        <div>
          {question.options.map((option, index) => (
            <button
              key={index}
              className="answer-button"
              onClick={() => handleAnswer(index)}
            >
              {option}
            </button>
          ))}
        </div>
      )}

      {question.type === 'input' && (
        <div>
          <input
            type="text"
            className="code-input"
            placeholder={question.placeholder}
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={(e) => {
              if (e.key === 'Enter') {
                handleAnswer();
              }
            }}
          />
          <button onClick={() => handleAnswer()}>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
        </div>
      )}

      {question.type === 'data' && (
        <div className="art-grid">
          {question.options.map((option, index) => (
            <div
              key={index}
              className="art-item"
              onClick={() => handleAnswer(index)}
            >
              {option.join(' ‚Üí ')}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default Quest;